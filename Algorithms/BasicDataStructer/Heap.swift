//
//  Heap.swift
//  Algorithms
//
//  Created by xiong_jia on 2022/11/17.
//

import Foundation

// 在二叉堆数组中，每个元素都要大于等于另外两个特定位置的元素。
// 当一颗二叉树的每个结点都大于等于它的子结点，它被称为堆有序


// MARK: 二叉堆是一组能够用堆有序的完全二叉树排序的元素，在数组中按照层级存储
// 这样，在数组中，位置 k 结点的元素的父结点位于 k/2，它的两个子结点位于 2k 和 2k+1。（如果存在的话）
// 这样能保证插入和删除元素变成了 对数级别 的复杂度


// 堆的有序化（reheapifying），会首先进行一些简单的改动，打破堆的状态，然后再遍历堆将堆的状态恢复。
// 有序化的过程中会遇到两种情况：
// 1. 结点的优先级上升（或是在堆底添加一个新的元素）时，需要 由下至上 恢复堆的顺序
// 2. 结点的优先级下降（如将根结点替换成一个较小的元素）时，需要 由上至下 恢复堆的数序

// 上浮 k 结点,由下至上的堆有序化（上浮）
/*
 func swim(_ k: Int) {
    while k > 1 && less(k/2, k) {
        exch(k/2, k)
    }
 }
*/

// 下沉 k 结点，由上至下的堆有序化（下沉）
/*
 func sink(_ k: Int) {
    while 2k <= N {
        j = 2k
        if j < N && less(j, j+1) { j += 1 }     // 让两个兄弟结点中更大的那个结点上浮
        exch(k, j)
        k = j
    }
 }
 */
